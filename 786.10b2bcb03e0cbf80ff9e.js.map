{"version":3,"file":"786.10b2bcb03e0cbf80ff9e.js","mappings":"sQAKO,MAAMA,EAAmBC,IACe,CAC3CC,KAAM,CACJ,CAAEC,UAAU,EAAMC,QAAS,uBAC3B,CAAEC,IAAK,EAAGC,IAAK,GAAIF,QAAS,6CAE9BG,MAAO,CACL,CACEC,QAAS,oDACTJ,QAAS,sBAGbK,MAAO,CACL,CAAEN,UAAU,EAAMC,QAAS,wBAC3B,CACEI,QAAS,oBACTJ,QAAS,6DAGbM,SAAU,CACR,CACEF,QAAS,oBACTJ,QAAS,iEAGbO,WAAY,CAAC,CAAER,UAAU,EAAMC,QAAS,sCAG7BH,I,kCC3BR,MCGMW,EACH,SADGA,EAEH,SAWGC,EAA0C,EAAGC,SAAQC,YAAWC,gBAC3E,MAAOC,EAAWC,IAAgB,IAAAC,UAASL,IAAWF,IAC/CQ,GAAQ,IAAKC,WACd,KAAEC,EAAI,eAAEC,EAAc,WAAEC,GCnBV,EAACC,EAAeV,EAAmBK,KACvD,MACEE,KAAMC,EACNC,WAAYE,EACZC,MAAOC,IACL,WACE,KAAEN,EAAI,QAAEO,EAAO,WAAEL,EAAU,UAAEM,EAAS,MAAEH,IAAU,QAAuBZ,EAAW,CACxFU,SAKF,OAHA,EAAAM,EAAAC,GAAgB,CAAEL,MAAOC,KACzB,EAAAG,EAAAC,GAAgB,CAAEZ,OAAMO,UAEjB,CACLL,OACAC,iBACAM,UACAL,WAAYA,GAAcE,EAC1BI,YACD,EDC4CG,CAAOnB,IAAWF,EAAgBG,EAAWK,IACpF,OAAEc,EAAM,WAAEC,EAAU,gBAAEC,GDpBL,CAAChB,IACxB,MAAOiB,GAAiBC,UAAWH,EAAYL,UAAWM,EAAe,MAAET,KACzE,UAYF,OAXA,EAAAI,EAAAC,GAAgB,CAAEZ,OAAMO,WACxB,EAAAY,EAAA,GAAkB,CAChBT,UAAWM,EACXI,KAAM,4BAQD,CACLN,OANa,KAAY,O,OAAA,E,OAAA,E,EAAA,YACzB,MAAMO,EAAOrB,EAAKsB,uBACZL,EAAcI,EACtB,E,YAH2B,K,6QAG1B,EAICN,aACAC,kBACD,ECE+CO,CAAUvB,IACpD,OAAEwB,EAAM,WAAEC,EAAU,kBAAEC,GErBL,CAAC1B,IACxB,MAAO2B,GAAiBT,UAAWO,EAAYf,UAAWgB,EAAiB,MAAEnB,KAC3E,UAYF,OAXA,EAAAI,EAAAC,GAAgB,CAAEZ,OAAMO,WACxB,EAAAY,EAAA,GAAkB,CAChBT,UAAWgB,EACXN,KAAM,iCAQD,CACLI,OANa,KAAY,O,OAAD,E,OAAA,E,EAAA,YACxB,MAAMH,EAAOrB,EAAKsB,uBACZK,EAAcN,EACtB,E,YAH0B,K,6QAGzB,EAICI,aACAC,oBACD,EFGiDE,CAAU5B,GAoB5D,OAlBA,IAAA6B,YAAU,KACJ3B,GACFF,EAAK8B,eAAe,OAAD,wBAAM5B,GAAI,CAAEX,WAAYW,EAAK6B,SAASC,KAC3D,GACC,CAAC9B,EAAMF,KAEV,IAAA6B,YAAU,KACJH,GACF9B,GACF,GACC,CAAC8B,EAAmB9B,KAEvB,IAAAiC,YAAU,KACJb,GACFlB,GAAa,EACf,GACC,CAACkB,KAGF,UAAC,IAAI,CACHhB,KAAMA,EACNlB,KAAK,cACLmD,WAAW,OACXC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,SAAU3C,IAAWF,EAAiBsB,EAASU,EAC/Cc,aAAa,MAAK,WAElB,SAAC,IAAKC,KAAI,CAAYC,MAAM,KAAK1D,KAAK,KAAK2D,OAAQ/C,IAAWF,EAAc,UAC1E,SAAC,IAAK,CAACkD,UAAQ,EAACD,OAAQ/C,IAAWF,OAGrC,SAAC,IAAK+C,KAAI,CAAYC,MAAM,OAAO1D,KAAK,OAAO6D,MAAO/D,EAAgB,QAAO,UAC3E,SAAC,IAAK,CAACgE,SAAU,IAAM9C,GAAa,GAAO+C,YAAY,YAGzD,SAAC,IAAKN,KAAI,CAAYC,MAAM,eAAe1D,KAAK,QAAQ6D,MAAO/D,EAAgB,SAAQ,UACrF,SAAC,IAAK,CAACgE,SAAU,IAAM9C,GAAa,GAAO+C,YAAY,oBAGzD,SAAC,IAAKN,KAAI,CAAYC,MAAM,cAAc1D,KAAK,OAAM,UACnD,SAAC,IAAMgE,SAAQ,CAACF,SAAU,IAAM9C,GAAa,GAAO+C,YAAY,mBAGlE,SAAC,IAAKN,KAAI,CAAYC,MAAM,YAAY1D,KAAK,WAAW6D,MAAO/D,EAAgB,YAAW,UACxF,SAAC,IAAW,CACVmE,MAAO,CAAEC,MAAO,QAChBJ,SAAU,IAAM9C,GAAa,GAC7B+C,YAAY,iBAIhB,SAAC,IAAKN,KAAI,CAAYC,MAAM,QAAQ1D,KAAK,QAAQ6D,MAAO/D,EAAgB,SAAQ,UAC9E,SAAC,IAAW,CACVmE,MAAO,CAAEC,MAAO,QAChBJ,SAAU,IAAM9C,GAAa,GAC7B+C,YAAY,aAIhB,SAAC,IAAKN,KAAI,CACRC,MAAM,WACN1D,KAAK,aACL6D,MAAO/D,EAAgB,cAAa,UAEpC,SAAC,IAAM,CAACiE,YAAY,WAAWD,SAAU,IAAM9C,GAAa,GAAOmD,YAAY,EAAK,SACjF9C,aAAc,EAAdA,EAAgBD,KAAKgD,KAAKnB,IACzB,SAAC,IAAM,CAAmBoB,MAAOpB,EAASC,GAAE,SACzCD,EAASjD,MADCiD,EAASC,WAO5B,SAAC,KAAM,CACLoB,KAAK,UACLC,SAAS,SACTN,MAAO,CAAEC,MAAO,QAChBM,SAAUlD,GAAcW,IAAelB,EAAS,SAE/CkB,GAAcU,GAAa,SAAC,IAAI,IAAM/B,IAAWF,EAAiB,OAAS,aAGjF,E,cG5FI,MAAM+D,EAA0B,K,MACrC,MAAOC,EAAeC,IAAoB,IAAA1D,UAGhC,OACJ,KAAEG,EAAMK,MAAOmD,IAAgB,WAC9BC,GAAiBzC,UAAW0C,EAAU,UAAElD,EAAS,MAAEH,KAAW,WACrE,EAAAI,EAAAC,GAAgB,CAAEL,MAAOmD,KACzB,EAAA/C,EAAAC,GAAgB,CAAEL,WAClB,EAAAY,EAAA,GAAkB,CAAET,YAAWU,KAAM,gCAErC,MAAMyC,GAAa,IAAAC,cAChBC,IAEG,UAAC,IAAK,CAAChB,MAAO,CAAEiB,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAAU,WAC/E,SAAC,KAAM,CACLC,QAAS,KACPV,EAAiB,CAAE/D,OAAQF,EAAgBuE,WAAU,EACtD,mBAIH,SAAC,KAAM,CAACK,QAAM,EAACD,QAAS,KAAY,O,OAAA,E,OAAA,E,EAAA,yBAAMR,EAAcI,EAAQ/B,GAAG,E,YAA/B,K,6QAA+B,0BAMzE,CAAC2B,IAGGU,GAAuB,IAAAP,cAC3B,EAAGC,UAASI,cAAyC,CACnDG,IAAKP,EAAQ/B,GACbuC,OAAQ,KACN,SAACC,EAAA,GAAW,CACVT,QAASA,EACTI,QAASA,EAAU,IAAMA,EAAQJ,EAAQ/B,SAAMyC,EAC/CC,OAAQ,IAAOb,EAAaA,EAAWE,QAAWU,OAIxD,CAACZ,IAGGc,EAAsE,QAA9D,EAAAzE,aAAI,EAAJA,EAAMA,KAAKgD,KAAKa,GAAYM,EAAqB,CAAEN,qBAAW,QAAI,GAqBhF,OACE,iBAAKa,UCtFmB,uCDsFQ,UAC7BpB,IACC,SAAC,IAAK,CACJqB,OAAO,wCACPC,KAAMC,QAAQvB,GACdwB,SAAS,EACTC,SAAU,IAAMxB,EAAiB,MACjCiB,QAAQ,wBAAK,UAEb,SAACjF,EAAW,CACVC,OAAQ8D,EAAe9D,OACvBC,UAAW6D,EAAeO,QAAQ/B,GAClCpC,UAjBY,KACpB6D,EAAiB,KAAK,OAoBpB,0BACE,SAAC,KAAM,CAACU,QArCO,KACnBV,EAAiB,CACf/D,OAAQF,EACRuE,QAAS,CACP/B,GAAI,GACJlD,KAAM,GACNoG,UAAW,IAAIC,KAAKA,KAAKC,OACzBC,UAAW,IAAIF,KAAKA,KAAKC,OACzB/F,MAAO,EACP0C,SAAU,CAAEC,GAAI,IAChBsD,UAAW,KAEb,EAyB+B,mCAE/B,SAAC,IAAO,IACP1B,IAAc,SAAC,IAAI,IACnBA,IAAc,SAAC,IAAO,KACvB,SAAC2B,EAAA,EAAU,CAACZ,MAAOA,MAEtB,EEpGH,EAR8B,KAE1B,gBAAKC,UCJc,oCDIQ,UACzB,SAACrB,EAAa,K,oEEIb,MAAM5C,EAAkB,EAAYX,OAAMO,YAC/C,MAAM,UAAEiF,IAAc,UAEtB,IAAA3D,YAAU,KACR,GAAItB,EAAO,EACT,QAAmBA,GAEfP,GACFA,EAAKyF,WAAU,QAAkBlF,IAGnC,MAAMmF,GAAgB,QAA0BnF,GAC5CmF,GACFF,EAAUE,EAEd,IACC,CAACnF,EAAOP,EAAMwF,GAAW,C,yDCvBvB,MAAMG,EAAa,KACxB,MAAMC,GAAU,IAAAC,YAAW,KAC3B,IAAKD,EACH,MAAM,IAAIE,MAAM,6DAElB,OAAOF,CAAO,C,0DCAT,MAAMzE,EAAoB,EAAGT,YAAWU,WAC7C,MAAM,YAAE2E,IAAgB,UAExB,IAAAlE,YAAU,KACJnB,GACFqF,EAAY3E,EACd,GACC,CAACV,EAAWU,EAAM2E,GAAa,C,0DCdpC,MCUaR,EAAyC,EACpDS,SACArB,QACAsB,cACAC,uBAEqB,IAAjBvB,EAAMwB,QACD,gBAAKvB,UDjB0I,gCCiBnH,kCAInC,eAAIA,eAAsBH,IAAXuB,GAAwBA,EDrBsB,mCAA1C,+BCqB0D,SAC1ErB,EAAMzB,KAAI,CAACkD,EAAMC,KAChB,SAACC,EAAQ,CAEPF,KAAMA,EACNG,IAAKC,EAAc,CAAE7B,QAAO0B,QAAOJ,cAAaC,uBAF3CE,EAAK9B,SAadmC,GAAU,IAAAC,aAAyC,EAAGN,QAAQG,KAClE,eAAIvE,GAAIoE,EAAK9B,IAAKiC,IAAKA,EAAK3B,UDtCiF,mCCsCvD,SACnDwB,EAAK7B,aAGVkC,EAAQE,YAAc,UAEtB,MAAML,GAAW,IAAAM,MAAKH,GAEhBD,EAAgB,EACpB7B,QACA0B,QACAJ,cACAC,uBAOQW,IACFR,IAAU1B,EAAMwB,OAAS,GAAKF,IAChCA,EAAYa,QAAUD,EAClBX,GACFA,EAAkBvB,EAAMA,EAAMwB,OAAS,GAAG7B,KAE9C,C","sources":["webpack://app-store/./src/features/forms/ProductForm/lib/getProductRules.ts","webpack://app-store/./src/features/forms/ProductForm/model/useUpdate.ts","webpack://app-store/./src/features/forms/ProductForm/ui/ProductForm.tsx","webpack://app-store/./src/features/forms/ProductForm/model/useGet.ts","webpack://app-store/./src/features/forms/ProductForm/model/useCreate.ts","webpack://app-store/./src/widgets/editors/ProductEditor/ui/ProductEditor.tsx","webpack://app-store/./src/widgets/editors/ProductEditor/ui/ProductEditor.module.scss?b096","webpack://app-store/./src/pages/ProductEditPage/ProductEditPage.tsx","webpack://app-store/./src/pages/ProductEditPage/ProductEditPage.module.scss?a18e","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/hooks/useSuccessHandler.ts","webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx"],"sourcesContent":["import { Rule } from 'antd/es/form';\nimport { FieldType } from '../types/fields';\n\nexport type AllowedFields = Exclude<keyof FieldType, 'id' | 'desc'>;\n\nexport const getProductRules = (field: AllowedFields) => {\n  const rules: Record<AllowedFields, Rule[]> = {\n    name: [\n      { required: true, message: 'Please enter a name' },\n      { min: 3, max: 40, message: 'Name must be between 3 and 40 characters' },\n    ],\n    photo: [\n      {\n        pattern: /^(https?:\\/\\/.*\\.(?:png|jpg|jpeg|gif|webp|svg))$/i,\n        message: 'Invalid photo URL',\n      },\n    ],\n    price: [\n      { required: true, message: 'Please enter a price' },\n      {\n        pattern: /^\\d+(\\.\\d{1,2})?$/,\n        message: 'Price must be a valid number with up to 2 decimal places',\n      },\n    ],\n    oldPrice: [\n      {\n        pattern: /^\\d+(\\.\\d{1,2})?$/,\n        message: 'Old price must be a valid number with up to 2 decimal places',\n      },\n    ],\n    categoryId: [{ required: true, message: 'Please select a category product' }],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { useUpdateProductMutation } from 'src/entities/Product';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useUpdate = (form: FormInstance<FieldType>) => {\n  const [updateProduct, { isLoading: isUpdating, isSuccess: isUpdateSuccess, error }] =\n    useUpdateProductMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess: isUpdateSuccess,\n    mess: 'Data saved successfully',\n  });\n\n  const update = async () => {\n    const body = form.getFieldsValue();\n    await updateProduct(body);\n  };\n\n  return {\n    update,\n    isUpdating,\n    isUpdateSuccess,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { Button, Form, Input, InputNumber, Select, Spin } from 'antd';\nimport { Option } from 'antd/es/mentions';\nimport { getProductRules } from '../lib/getProductRules';\nimport { useCreate } from '../model/useCreate';\nimport { useGet } from '../model/useGet';\nimport { useUpdate } from '../model/useUpdate';\nimport { FieldType } from '../types/fields';\n\nexport const Actions = {\n  create: 'create',\n  update: 'update',\n} as const;\n\nexport type Action = (typeof Actions)[keyof typeof Actions];\n\ninterface ProductFormProps {\n  action: Action;\n  productId: string;\n  onCreated: () => void;\n}\n\nexport const ProductForm: React.FC<ProductFormProps> = ({ action, productId, onCreated }) => {\n  const [isChanges, setIsChanges] = useState(action === Actions.create);\n  const [form] = Form.useForm();\n  const { data, dataCategories, isFetching } = useGet(action === Actions.create, productId, form);\n  const { update, isUpdating, isUpdateSuccess } = useUpdate(form);\n  const { create, isCreating, isCreatingSuccess } = useCreate(form);\n\n  useEffect(() => {\n    if (data) {\n      form.setFieldsValue({ ...data, categoryId: data.category.id });\n    }\n  }, [data, form]);\n\n  useEffect(() => {\n    if (isCreatingSuccess) {\n      onCreated();\n    }\n  }, [isCreatingSuccess, onCreated]);\n\n  useEffect(() => {\n    if (isUpdateSuccess) {\n      setIsChanges(false);\n    }\n  }, [isUpdateSuccess]);\n\n  return (\n    <Form\n      form={form}\n      name=\"ProductForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={action === Actions.update ? update : create}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Id\" name=\"id\" hidden={action === Actions.create}>\n        <Input readOnly hidden={action === Actions.create} />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Name\" name=\"name\" rules={getProductRules('name')}>\n        <Input onChange={() => setIsChanges(true)} placeholder=\"Name\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Photo source\" name=\"photo\" rules={getProductRules('photo')}>\n        <Input onChange={() => setIsChanges(true)} placeholder=\"Photo source\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Description\" name=\"desc\">\n        <Input.TextArea onChange={() => setIsChanges(true)} placeholder=\"Description\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Old price\" name=\"oldPrice\" rules={getProductRules('oldPrice')}>\n        <InputNumber\n          style={{ width: '100%' }}\n          onChange={() => setIsChanges(true)}\n          placeholder=\"Old price\"\n        />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Price\" name=\"price\" rules={getProductRules('price')}>\n        <InputNumber\n          style={{ width: '100%' }}\n          onChange={() => setIsChanges(true)}\n          placeholder=\"Price\"\n        />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"Category\"\n        name=\"categoryId\"\n        rules={getProductRules('categoryId')}\n      >\n        <Select placeholder=\"Category\" onChange={() => setIsChanges(true)} allowClear={false}>\n          {dataCategories?.data.map((category) => (\n            <Option key={category.id} value={category.id}>\n              {category.name}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        style={{ width: '100%' }}\n        disabled={isFetching || isUpdating || !isChanges}\n      >\n        {isUpdating || isCreating ? <Spin /> : action === Actions.update ? 'Save' : 'Create'}\n      </Button>\n    </Form>\n  );\n};\n","import { FormInstance } from 'antd';\nimport { useGetAllCategoriesQuery } from 'src/entities/Category';\nimport { useGetProductByIdQuery } from 'src/entities/Product';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useGet = (skip: boolean, productId: string, form: FormInstance<FieldType>) => {\n  const {\n    data: dataCategories,\n    isFetching: isFetchingCategories,\n    error: errorCategories,\n  } = useGetAllCategoriesQuery();\n  const { data, refetch, isFetching, isSuccess, error } = useGetProductByIdQuery(productId, {\n    skip,\n  });\n  useErrorHandler({ error: errorCategories });\n  useErrorHandler({ form, error });\n\n  return {\n    data,\n    dataCategories,\n    refetch,\n    isFetching: isFetching || isFetchingCategories,\n    isSuccess,\n  };\n};\n","import { FormInstance } from 'antd';\nimport { useCreateProductMutation } from 'src/entities/Product';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useCreate = (form: FormInstance<FieldType>) => {\n  const [createProduct, { isLoading: isCreating, isSuccess: isCreatingSuccess, error }] =\n    useCreateProductMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess: isCreatingSuccess,\n    mess: 'Product created successfully',\n  });\n\n  const create = async () => {\n    const body = form.getFieldsValue();\n    await createProduct(body);\n  };\n\n  return {\n    create,\n    isCreating,\n    isCreatingSuccess,\n  };\n};\n","import { useCallback, useState } from 'react';\nimport { Button, Divider, Modal, Space, Spin } from 'antd';\nimport {\n  Product,\n  ProductCard,\n  useDeleteProductMutation,\n  useGetAllProductsQuery,\n} from 'src/entities/Product';\nimport { Action, Actions, ProductForm } from 'src/features/forms/ProductForm';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { IRenderItem } from 'src/shared/ui/RenderList/IRenderItem';\nimport { RenderList } from 'src/shared/ui/RenderList/RenderList';\nimport styles from './ProductEditor.module.scss';\n\ninterface ConvertProps {\n  product: Product;\n  onClick?: (id: string) => void;\n}\n\nexport const ProductEditor: React.FC = () => {\n  const [actionProduct, setActionProduct] = useState<{\n    action: Action;\n    product: Product;\n  } | null>(null);\n  const { data, error: getAllError } = useGetAllProductsQuery();\n  const [deleteProduct, { isLoading: isDeleting, isSuccess, error }] = useDeleteProductMutation();\n  useErrorHandler({ error: getAllError });\n  useErrorHandler({ error });\n  useSuccessHandler({ isSuccess, mess: 'Product delete successfully' });\n\n  const footerItem = useCallback(\n    (product: Product) => {\n      return (\n        <Space style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n          <Button\n            onClick={() => {\n              setActionProduct({ action: Actions.update, product });\n            }}\n          >\n            Edit\n          </Button>\n          <Button danger onClick={async () => await deleteProduct(product.id)}>\n            Delete\n          </Button>\n        </Space>\n      );\n    },\n    [deleteProduct],\n  );\n\n  const convertProductToItem = useCallback(\n    ({ product, onClick }: ConvertProps): IRenderItem => ({\n      key: product.id,\n      render: () => (\n        <ProductCard\n          product={product}\n          onClick={onClick ? () => onClick(product.id) : undefined}\n          footer={() => (footerItem ? footerItem(product) : undefined)}\n        />\n      ),\n    }),\n    [footerItem],\n  );\n\n  const items = data?.data.map((product) => convertProductToItem({ product })) ?? [];\n\n  const handleCreate = () => {\n    setActionProduct({\n      action: Actions.create,\n      product: {\n        id: '',\n        name: '',\n        createdAt: new Date(Date.now()),\n        updatedAt: new Date(Date.now()),\n        price: 0,\n        category: { id: '' },\n        commandId: '',\n      },\n    });\n  };\n\n  const handleCreated = () => {\n    setActionProduct(null);\n  };\n\n  return (\n    <div className={styles.container}>\n      {actionProduct && (\n        <Modal\n          title={<p>Edit product</p>}\n          open={Boolean(actionProduct)}\n          loading={false}\n          onCancel={() => setActionProduct(null)}\n          footer={<></>}\n        >\n          <ProductForm\n            action={actionProduct!.action}\n            productId={actionProduct!.product.id}\n            onCreated={handleCreated}\n          />\n        </Modal>\n      )}\n      <div>\n        <Button onClick={handleCreate}>Create new product</Button>\n      </div>\n      <Divider />\n      {isDeleting && <Spin />}\n      {isDeleting && <Divider />}\n      <RenderList items={items} />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProductEditor-module_container-HHjGH\"};","import { ProductEditor } from 'src/widgets/editors/ProductEditor';\nimport styles from './ProductEditPage.module.scss';\n\nconst ProductPage: React.FC = () => {\n  return (\n    <div className={styles.page}>\n      <ProductEditor />\n    </div>\n  );\n};\n\nexport default ProductPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"ProductEditPage-module_page-Kbjhx\"};","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { useEffect } from 'react';\nimport { useMessage } from './useMessage';\n\ninterface UseSuccessHandlerProps {\n  isSuccess: boolean;\n  mess: string;\n}\n\nexport const useSuccessHandler = ({ isSuccess, mess }: UseSuccessHandlerProps) => {\n  const { showSuccess } = useMessage();\n\n  useEffect(() => {\n    if (isSuccess) {\n      showSuccess(mess);\n    }\n  }, [isSuccess, mess, showSuccess]);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"RenderList-module_list-BF_R0\",\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\",\"empty\":\"RenderList-module_empty-VeKxm\"};","import React, { forwardRef, memo } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderListProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged?: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  isGrid,\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  return (\n    <ul className={isGrid === undefined || isGrid ? styles.listGrid : styles.list}>\n      {items.map((item, index) => (\n        <ItemMemo\n          key={item.key}\n          item={item}\n          ref={setRefForLast({ items, index, lastItemRef, onLastItemChanged })}\n        />\n      ))}\n    </ul>\n  );\n};\n\ntype ListItemProps = {\n  item: IRenderItem;\n};\n\nconst ItemRef = forwardRef<HTMLLIElement, ListItemProps>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\nItemRef.displayName = 'ItemRef';\n\nconst ItemMemo = memo(ItemRef);\n\nconst setRefForLast = ({\n  items,\n  index,\n  lastItemRef,\n  onLastItemChanged,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged?: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      if (onLastItemChanged) {\n        onLastItemChanged(items[items.length - 1].key);\n      }\n    }\n  };\n};\n"],"names":["getProductRules","field","name","required","message","min","max","photo","pattern","price","oldPrice","categoryId","Actions","ProductForm","action","productId","onCreated","isChanges","setIsChanges","useState","form","useForm","data","dataCategories","isFetching","skip","isFetchingCategories","error","errorCategories","refetch","isSuccess","useErrorHandler","u","useGet","update","isUpdating","isUpdateSuccess","updateProduct","isLoading","useSuccessHandler","mess","body","getFieldsValue","useUpdate","create","isCreating","isCreatingSuccess","createProduct","useCreate","useEffect","setFieldsValue","category","id","labelAlign","labelCol","span","wrapperCol","onFinish","autoComplete","Item","label","hidden","readOnly","rules","onChange","placeholder","TextArea","style","width","allowClear","map","value","type","htmlType","disabled","ProductEditor","actionProduct","setActionProduct","getAllError","deleteProduct","isDeleting","footerItem","useCallback","product","display","justifyContent","alignItems","onClick","danger","convertProductToItem","key","render","Product","undefined","footer","items","className","title","open","Boolean","loading","onCancel","createdAt","Date","now","updatedAt","commandId","RenderList","showError","setFields","joinedMessage","useMessage","context","useContext","Error","showSuccess","isGrid","lastItemRef","onLastItemChanged","length","item","index","ItemMemo","ref","setRefForLast","ItemRef","forwardRef","displayName","memo","element","current"],"sourceRoot":""}