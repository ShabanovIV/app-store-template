{"version":3,"file":"652.4b4bdff0793deb4e2a4b.js","mappings":"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","sources":["webpack://app-store/./src/features/forms/SignInForm/model/useSignIn.ts","webpack://app-store/./src/features/forms/SignInForm/ui/SignInForm.tsx","webpack://app-store/./src/features/forms/SignUpForm/lib/getSignUpRules.ts","webpack://app-store/./src/features/forms/SignUpForm/model/useSignUp.ts","webpack://app-store/./src/features/forms/SignUpForm/ui/SignUpForm.tsx","webpack://app-store/./src/widgets/switchers/AuthSwitcher/ui/AuthSwitcher.tsx","webpack://app-store/./src/widgets/switchers/AuthSwitcher/ui/AuthSwitcher.module.scss?b2e8","webpack://app-store/./src/pages/AuthPage/AuthPage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/lib/formValidation/getRules.ts"],"sourcesContent":["import { FormInstance } from 'antd';\nimport { useSigninMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useSignIn = (form: FormInstance<FieldType>) => {\n  const [signin, { isLoading, isSuccess, error }] = useSigninMutation();\n  useErrorHandler<FieldType>({ form, error });\n\n  const signIn = async (email: string, password: string) => {\n    await signin({ email, password });\n  };\n\n  return {\n    signIn,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { Fields, getRules } from 'src/shared/lib/formValidation/getRules';\nimport { useSignIn } from '../model/useSignIn';\nimport { FieldType } from '../types/fields';\n\ninterface SignInFormProps {\n  onSuccess: () => void;\n}\n\nexport const SignInForm: React.FC<SignInFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm();\n  const { signIn, isLoading, isSuccess } = useSignIn(form);\n\n  useEffect(() => {\n    if (isSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess, onSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    if (values.email && values.password) {\n      signIn(values.email, values.password);\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"SignInForm\"\n      labelCol={{ span: 8 }}\n      labelAlign=\"left\"\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Email\" name=\"email\" rules={getRules(Fields.email)}>\n        <Input />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Password\" name=\"password\" rules={getRules(Fields.password)}>\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item label={null}>\n        <Button style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\">\n          {isLoading ? <Spin /> : 'Sign In'}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n","import { FormInstance, Rule } from 'antd/es/form';\nimport { Fields, getRules } from 'src/shared/lib/formValidation/getRules';\nimport { FieldType } from '../types/fields';\n\nexport const getSignUpRules = (field: keyof FieldType, form: FormInstance<FieldType>) => {\n  const rules: Record<keyof FieldType, Rule[]> = {\n    email: getRules(Fields.email),\n    password: getRules(Fields.password),\n    confirm: [\n      { required: true, message: 'Please confirm your password' },\n      {\n        validator: (_, value, callback) => {\n          if (value && value !== form.getFieldValue('password')) {\n            callback('Passwords do not match');\n          } else {\n            callback();\n          }\n        },\n      },\n    ],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { useSignupMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useSignUp = (form: FormInstance<FieldType>) => {\n  const [signup, { isLoading, isSuccess, error }] = useSignupMutation();\n  useErrorHandler<FieldType>({ form, error });\n\n  const signUp = async (email: string, password: string) => {\n    await signup({ email, password });\n  };\n\n  return {\n    signUp,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { getSignUpRules } from '../lib/getSignUpRules';\nimport { useSignUp } from '../model/useSignUp';\nimport { FieldType } from '../types/fields';\n\ninterface SignUpFormProps {\n  onSuccess: () => void;\n}\n\nexport const SignUpForm: React.FC<SignUpFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm<FieldType>();\n  const { signUp, isLoading, isSuccess } = useSignUp(form);\n\n  useEffect(() => {\n    if (isSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess, onSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    if (values.email && values.password) {\n      signUp(values.email, values.password);\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"SignUpForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Email\" name=\"email\" rules={getSignUpRules('email', form)}>\n        <Input />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"Password\"\n        name=\"password\"\n        rules={getSignUpRules('password', form)}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Confirm\" name=\"confirm\" rules={getSignUpRules('confirm', form)}>\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item label={null}>\n        <Button disabled={isLoading} style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\">\n          {isLoading ? <Spin tip={<div>Loading...</div>} /> : 'Join'}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n","import { useState } from 'react';\nimport { Button, Space, Typography, Divider } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { SignInForm } from 'src/features/forms/SignInForm';\nimport { SignUpForm } from 'src/features/forms/SignUpForm';\nimport styles from './AuthSwitcher.module.scss';\n\nconst { Text } = Typography;\n\nexport const AuthSwitcher: React.FC = () => {\n  const [isSignIn, setIsSignIn] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleClick = () => {\n    setIsSignIn((prev) => !prev);\n  };\n\n  const handleSuccess = () => {\n    const from = location.state?.from || '/';\n    navigate(from, { replace: true });\n  };\n\n  return (\n    <div className={styles.authCard}>\n      <h4 className={styles.title}>\n        {isSignIn ? 'Log in to your account' : 'Enter your email and create a password'}\n      </h4>\n\n      <Divider />\n\n      {isSignIn ? (\n        <SignInForm onSuccess={handleSuccess} />\n      ) : (\n        <SignUpForm onSuccess={handleSuccess} />\n      )}\n\n      <Divider />\n\n      <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n        <Text type=\"secondary\">\n          {isSignIn ? \"Don't have an account?\" : 'Already have an account?'}\n        </Text>\n        <Button type=\"link\" onClick={handleClick}>\n          {isSignIn ? 'Join' : 'Sign In'}\n        </Button>\n      </Space>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"authCard\":\"AuthSwitcher-module_authCard-JuBA_\",\"title\":\"AuthSwitcher-module_title-k60Pw\"};","import { AuthSwitcher } from 'src/widgets/switchers/AuthSwitcher';\n\nconst AuthPage: React.FC = () => {\n  return <AuthSwitcher />;\n};\n\nexport default AuthPage;\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { Rule } from 'antd/es/form';\n\nexport const Fields = {\n  email: 'email',\n  password: 'password',\n} as const;\n\nexport type Field = (typeof Fields)[keyof typeof Fields];\n\nexport const getRules = (field: Field) => {\n  const rules: Record<Field, Rule[]> = {\n    email: [\n      { required: true, message: 'Please input your email' },\n      {\n        pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n        message: 'Please enter a valid email address',\n      },\n    ],\n    password: [{ required: true, message: 'Please enter your password' }],\n  };\n\n  return rules[field];\n};\n"],"names":["SignInForm","onSuccess","form","useForm","signIn","isLoading","isSuccess","signin","error","useErrorHandler","u","email","password","useSignIn","useEffect","name","labelCol","span","labelAlign","wrapperCol","onFinish","values","autoComplete","Item","label","rules","getRules","Password","style","width","type","htmlType","getSignUpRules","field","confirm","required","message","validator","_","value","callback","getFieldValue","SignUpForm","signUp","signup","useSignUp","disabled","tip","Text","AuthSwitcher","isSignIn","setIsSignIn","useState","navigate","location","handleSuccess","from","state","replace","className","direction","align","onClick","prev","showError","setFields","joinedMessage","useMessage","context","useContext","Error","Fields","pattern"],"sourceRoot":""}