import fs from 'fs';
import path from 'path';
import { execFile } from 'child_process';
import { createRequire } from 'module';

const require = createRequire(import.meta.url);
const packageJson = require('../package.json'); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º package.json

const dependencies = packageJson.dependencies ? Object.keys(packageJson.dependencies) : [];
const devDependencies = packageJson.devDependencies ? Object.keys(packageJson.devDependencies) : [];

// ‚ùå –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
const excludedPackages = ['xlsx', 'exceljs'];

// üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
const LIMIT_ROWS = null;

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º package-lock.json (–µ—Å–ª–∏ –µ—Å—Ç—å)
const packageLockPath = path.resolve('../package-lock.json');
const packageLock = fs.existsSync(packageLockPath)
  ? JSON.parse(fs.readFileSync(packageLockPath, 'utf8'))
  : { dependencies: {} };

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –î–î.–ú–ú.–ì–ì–ì–ì
const formatDate = (dateString) => {
  if (!dateString || dateString === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const date = new Date(dateString);
  return date.toISOString().split('T')[0].split('-').reverse().join('.'); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –≤ DD.MM.YYYY
};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤—Ä—É—á–Ω—É—é –≤ `node_modules`
const getVersionFromNodeModules = (packageName) => {
  try {
    const packagePath = require.resolve(`${packageName}/package.json`, { paths: [process.cwd()] });
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    return packageData.version;
  } catch {
    return null;
  }
};

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ `npm list`
const getInstalledVersion = async (packageName) => {
  return new Promise((resolve) => {
    execFile(
      'npm',
      ['list', packageName, '--json', '--depth=0', '--all'],
      { maxBuffer: 1024 * 500 },
      (error, stdout) => {
        if (error)
          return resolve(
            getVersionFromNodeModules(packageName) ||
              packageLock.dependencies?.[packageName]?.version ||
              null,
          );
        try {
          const listInfo = JSON.parse(stdout);
          resolve(
            listInfo.dependencies?.[packageName]?.version ||
              getVersionFromNodeModules(packageName) ||
              packageLock.dependencies?.[packageName]?.version ||
              null,
          );
        } catch {
          resolve(
            getVersionFromNodeModules(packageName) ||
              packageLock.dependencies?.[packageName]?.version ||
              null,
          );
        }
      },
    );
  });
};

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ —á–µ—Ä–µ–∑ `npm view`
const fetchPackageInfo = async (packageName, isDependency = false, isDev = false) => {
  if (excludedPackages.includes(packageName)) return null;

  console.log(
    isDependency
      ? `   ‚ûú –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å [${packageName}]`
      : isDev
        ? `üîπ DevDependency [${packageName}]`
        : `üîç –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ø–∞–∫–µ—Ç [${packageName}]`,
  );

  const installedVersion = await getInstalledVersion(packageName);

  return new Promise((resolve) => {
    execFile('npm', ['view', packageName, '--json'], { maxBuffer: 1024 * 500 }, (error, stdout) => {
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–∫–µ—Ç–µ ${packageName}:`, error.message);
        return resolve({
          name: packageName,
          installedVersion: installedVersion || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
          installedVersionDate: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          latestVersion: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          latestVersionDate: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          description: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          license: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          dependencies: [],
          isDev,
        });
      }
      try {
        const packageInfo = JSON.parse(stdout.trim());

        const installedVersionDate =
          installedVersion && packageInfo.time?.[installedVersion]
            ? formatDate(packageInfo.time[installedVersion])
            : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        const latestVersion = packageInfo['dist-tags']?.latest || packageInfo.version;
        const latestVersionDate = packageInfo.time?.[latestVersion]
          ? formatDate(packageInfo.time[latestVersion])
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        resolve({
          name: packageInfo.name,
          installedVersion: installedVersion || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
          installedVersionDate,
          latestVersion,
          latestVersionDate,
          description: packageInfo.description?.replace(/(\r\n|\n|\r)/gm, ' ') || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
          license: packageInfo.license || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          dependencies: packageInfo.dependencies
            ? Object.keys(packageInfo.dependencies).filter((dep) => !excludedPackages.includes(dep))
            : [],
          isDev,
        });
      } catch (parseError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–∫–µ—Ç–µ ${packageName}:`, parseError.message);
        resolve({
          name: packageName,
          installedVersion: installedVersion || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
          installedVersionDate: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          latestVersion: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          latestVersionDate: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          description: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
          license: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          dependencies: [],
          isDev,
        });
      }
    });
  });
};

// ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤—ã—Ö ${LIMIT_ROWS || '–≤—Å–µ—Ö'} –ø–∞–∫–µ—Ç–∞—Ö...`);

  const selectedDependencies = LIMIT_ROWS ? dependencies.slice(0, LIMIT_ROWS) : dependencies;
  const selectedDevDependencies = LIMIT_ROWS
    ? devDependencies.slice(0, Math.max(0, LIMIT_ROWS - selectedDependencies.length))
    : devDependencies;

  const allDependencies = new Set();
  const dependencyTree = new Set();
  const devDependencyTree = new Set();

  const results = (
    await Promise.all([
      ...selectedDependencies.map((dep) => fetchPackageInfo(dep, false, false)),
      ...selectedDevDependencies.map((dep) => fetchPackageInfo(dep, false, true)),
    ])
  ).flat();

  results.forEach(({ name, isDev }) => {
    allDependencies.add(name);
    if (isDev) devDependencyTree.add(name);
    else dependencyTree.add(name);
  });

  const csvData = [
    'Level,Type,Package,Installed Version,Installed Version Date,Latest Version,Latest Version Date,Description,License',
  ];

  results.forEach(({ isDev, name, installedVersion, installedVersionDate, latestVersion, latestVersionDate, description, license }) => {
    const type = isDev ? 'DevDependency' : 'Dependency';
    csvData.push(
      `0,${type},${name},${installedVersion},${installedVersionDate},${latestVersion},${latestVersionDate},"${description}",${license}`,
    );
  });

  // üìä –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü CSV
  csvData.push('');
  csvData.push('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  csvData.push(`–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤,${allDependencies.size}`);
  csvData.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ dependencies,${dependencies.length}`);
  csvData.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ devDependencies,${devDependencies.length}`);
  csvData.push(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è dependencies,${dependencyTree.size}`);
  csvData.push(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è devDependencies,${devDependencyTree.size}`);

  fs.writeFileSync('dependencies-info.csv', csvData.join('\n'));
  console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ dependencies-info.csv (${results.length} —Å—Ç—Ä–æ–∫)`);

  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`  üîπ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${allDependencies.size}`);
  console.log(`  üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ dependencies: ${dependencies.length}`);
  console.log(`  üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ devDependencies: ${devDependencies.length}`);
  console.log(`  üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è dependencies: ${dependencyTree.size}`);
  console.log(`  üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è devDependencies: ${devDependencyTree.size}`);
};

main();
