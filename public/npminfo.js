import fs from "fs";
import path from "path";
import { execFile } from "child_process";
import { createRequire } from "module";

const require = createRequire(import.meta.url);
const packageJson = require("../package.json"); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º package.json

const dependencies = packageJson.dependencies ? Object.keys(packageJson.dependencies) : [];
const devDependencies = packageJson.devDependencies ? Object.keys(packageJson.devDependencies) : [];

// ‚ùå –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
const excludedPackages = ["xlsx", "exceljs"];

// üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
const LIMIT_ROWS = 1;

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º package-lock.json (–µ—Å–ª–∏ –µ—Å—Ç—å)
const packageLockPath = path.resolve("../package-lock.json");
const packageLock = fs.existsSync(packageLockPath)
  ? JSON.parse(fs.readFileSync(packageLockPath, "utf8"))
  : { dependencies: {} };

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –î–î.–ú–ú.–ì–ì–ì–ì
const formatDate = (dateString) => {
  if (!dateString || dateString === "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  const date = new Date(dateString);
  return date.toISOString().split("T")[0].split("-").reverse().join("."); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –≤ DD.MM.YYYY
};

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ —á–µ—Ä–µ–∑ `npm view`
const fetchPackageInfo = async (packageName, isDependency = false, isDev = false) => {
  if (excludedPackages.includes(packageName)) return null;

  console.log(
    isDependency
      ? `   ‚ûú –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å [${packageName}]`
      : isDev
      ? `üîπ DevDependency [${packageName}]`
      : `üîç –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ø–∞–∫–µ—Ç [${packageName}]`
  );

  return new Promise((resolve) => {
    execFile("npm", ["view", packageName, "--json"], { maxBuffer: 1024 * 500 }, (error, stdout) => {
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–∫–µ—Ç–µ ${packageName}:`, error.message);
        return resolve({
          name: packageName,
          latestVersion: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          latestVersionDate: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          description: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
          license: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          dependencies: [],
          isDev,
        });
      }
      try {
        const packageInfo = JSON.parse(stdout.trim());
        const latestVersion = packageInfo["dist-tags"]?.latest || packageInfo.version;
        const latestVersionDate = packageInfo.time?.[latestVersion]
          ? formatDate(packageInfo.time[latestVersion])
          : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        resolve({
          name: packageInfo.name,
          latestVersion,
          latestVersionDate,
          description: packageInfo.description?.replace(/(\r\n|\n|\r)/gm, " ") || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
          license: packageInfo.license || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          dependencies: packageInfo.dependencies
            ? Object.keys(packageInfo.dependencies).filter((dep) => !excludedPackages.includes(dep))
            : [],
          isDev,
        });
      } catch (parseError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–∫–µ—Ç–µ ${packageName}:`, parseError.message);
        resolve({
          name: packageName,
          latestVersion: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          latestVersionDate: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          description: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞",
          license: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          dependencies: [],
          isDev,
        });
      }
    });
  });
};

// ‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const buildDependencyTree = async (packageName, level = 0, isDev = false, visited = new Set()) => {
  if (visited.has(packageName)) return [];
  visited.add(packageName);

  const packageInfo = await fetchPackageInfo(packageName, level > 0, isDev);
  if (!packageInfo) return [];

  const children = await Promise.all(
    packageInfo.dependencies.map((dep) => buildDependencyTree(dep, level + 1, isDev, visited))
  );

  return [{ level, ...packageInfo }, ...children.flat()];
};

// ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤—ã—Ö ${LIMIT_ROWS || "–≤—Å–µ—Ö"} –ø–∞–∫–µ—Ç–∞—Ö...`);

  const selectedDependencies = LIMIT_ROWS ? dependencies.slice(0, LIMIT_ROWS) : dependencies;
  const selectedDevDependencies = LIMIT_ROWS
    ? devDependencies.slice(0, Math.max(0, LIMIT_ROWS - selectedDependencies.length))
    : devDependencies;

  const results = (
    await Promise.all([
      ...selectedDependencies.map((dep) => buildDependencyTree(dep, 0, false)),
      ...selectedDevDependencies.map((dep) => buildDependencyTree(dep, 0, true)),
    ])
  ).flat();

  const allPackages = new Set(results.map((pkg) => pkg.name));
  const uniqueDependencies = new Set(selectedDependencies);
  const uniqueDevDependencies = new Set(selectedDevDependencies);

  const csvData = [
    "Level,Type,Package,Latest Version,Latest Version Date,Description,License",
  ];

  results.forEach(({ level, isDev, name, latestVersion, latestVersionDate, description, license }) => {
    const type = isDev ? "DevDependency" : "Dependency";
    csvData.push(`${level},${type},${name},${latestVersion},${latestVersionDate},"${description}",${license}`);
  });

  // üìä –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ CSV –∏ –ª–æ–≥
  const stats = [
    "",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
    `–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤,${allPackages.size}`,
    `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ dependencies,${dependencies.length}`,
    `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ devDependencies,${devDependencies.length}`,
    `–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è dependencies,${uniqueDependencies.size}`,
    `–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è devDependencies,${uniqueDevDependencies.size}`,
  ];
  csvData.push(...stats);

  fs.writeFileSync("dependencies-info.csv", csvData.join("\n"));
  console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ dependencies-info.csv (${results.length} —Å—Ç—Ä–æ–∫)`);

  // üìä –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥
  console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
  console.log(`  üîπ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${allPackages.size}`);
  console.log(`  üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ dependencies: ${dependencies.length}`);
  console.log(`  üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ devDependencies: ${devDependencies.length}`);
  console.log(`  üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è dependencies: ${uniqueDependencies.size}`);
  console.log(`  üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è devDependencies: ${uniqueDevDependencies.size}`);
};

main();
