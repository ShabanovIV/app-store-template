{"version":3,"file":"900.e85d8a75db34b5d4f0d3.js","mappings":"wLACA,MCMaA,EAAsB,K,MACjC,MAAM,KAAEC,EAAI,MAAEC,IAAU,WACxB,EAAAC,EAAAC,GAAgB,CAAEF,UAElB,MAAMG,GAAwB,IAAAC,cAC3BC,IAA8B,CAC7BC,IAAKD,EAAME,GACXC,OAAQ,KAAM,SAACC,EAAA,GAAS,CAACJ,MAAOA,OAElC,IAGIK,EAA+D,QAAvD,EAAAX,aAAI,EAAJA,EAAMA,KAAKY,KAAKN,GAAUF,EAAsBE,YAAO,QAAI,GAEzE,OACE,gBAAKO,UDrBmB,mCCqBQ,UAC9B,SAACC,EAAA,EAAU,CAACC,QAAQ,EAAOJ,MAAOA,KAErC,ECnBH,EAJ4B,KACnB,SAACZ,EAAS,G,oECOZ,MAAMG,EAAkB,EAAYc,OAAMf,YAC/C,MAAM,UAAEgB,IAAc,UAEtB,IAAAC,YAAU,KACR,GAAIjB,EAAO,EACT,QAAmBA,GAEfe,GACFA,EAAKG,WAAU,QAAkBlB,IAGnC,MAAMmB,GAAgB,QAA0BnB,GAC5CmB,GACFH,EAAUG,EAEd,IACC,CAACnB,EAAOe,EAAMC,GAAW,C,yDCvBvB,MAAMI,EAAa,KACxB,MAAMC,GAAU,IAAAC,YAAW,KAC3B,IAAKD,EACH,MAAM,IAAIE,MAAM,6DAElB,OAAOF,CAAO,C,0DCPhB,MCUaR,EAAyC,EACpDC,SACAJ,QACAc,cACAC,uBAEqB,IAAjBf,EAAMgB,QACD,gBAAKd,UDjB0I,gCCiBnH,kCAInC,eAAIA,eAAsBe,IAAXb,GAAwBA,EDrBsB,mCAA1C,+BCqB0D,SAC1EJ,EAAMC,KAAI,CAACiB,EAAMC,KAChB,SAACC,EAAQ,CAEPF,KAAMA,EACNG,IAAKC,EAAc,CAAEtB,QAAOmB,QAAOL,cAAaC,uBAF3CG,EAAKtB,SAad2B,GAAU,IAAAC,aAAyC,EAAGN,QAAQG,KAClE,eAAIxB,GAAIqB,EAAKtB,IAAKyB,IAAKA,EAAKnB,UDtCiF,mCCsCvD,SACnDgB,EAAKpB,aAGVyB,EAAQE,YAAc,UAEtB,MAAML,GAAW,IAAAM,MAAKH,GAEhBD,EAAgB,EACpBtB,QACAmB,QACAL,cACAC,uBAOQY,IACFR,IAAUnB,EAAMgB,OAAS,GAAKF,IAChCA,EAAYc,QAAUD,EAClBZ,GACFA,EAAkBf,EAAMA,EAAMgB,OAAS,GAAGpB,KAE9C,C","sources":["webpack://app-store/./src/features/OrderList/ui/OrderList.module.scss?0c78","webpack://app-store/./src/features/OrderList/ui/OrderList.tsx","webpack://app-store/./src/pages/OrderPage/OrderPage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"OrderList-module_container-IG7TG\"};","import { useCallback } from 'react';\nimport { Order, OrderItem, useGetAllOrdersQuery } from 'src/entities/Order';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { IRenderItem } from 'src/shared/ui/RenderList/IRenderItem';\nimport { RenderList } from 'src/shared/ui/RenderList/RenderList';\nimport styles from './OrderList.module.scss';\n\nexport const OrderList: React.FC = () => {\n  const { data, error } = useGetAllOrdersQuery();\n  useErrorHandler({ error });\n\n  const convertCategoryToItem = useCallback(\n    (order: Order): IRenderItem => ({\n      key: order.id,\n      render: () => <OrderItem order={order} />,\n    }),\n    [],\n  );\n\n  const items = data?.data.map((order) => convertCategoryToItem(order)) ?? [];\n\n  return (\n    <div className={styles.container}>\n      <RenderList isGrid={false} items={items} />\n    </div>\n  );\n};\n","import { OrderList } from 'src/features/OrderList';\n\nconst OrderPage: React.FC = () => {\n  return <OrderList />;\n};\n\nexport default OrderPage;\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"RenderList-module_list-BF_R0\",\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\",\"empty\":\"RenderList-module_empty-VeKxm\"};","import React, { forwardRef, memo } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderListProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged?: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  isGrid,\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  return (\n    <ul className={isGrid === undefined || isGrid ? styles.listGrid : styles.list}>\n      {items.map((item, index) => (\n        <ItemMemo\n          key={item.key}\n          item={item}\n          ref={setRefForLast({ items, index, lastItemRef, onLastItemChanged })}\n        />\n      ))}\n    </ul>\n  );\n};\n\ntype ListItemProps = {\n  item: IRenderItem;\n};\n\nconst ItemRef = forwardRef<HTMLLIElement, ListItemProps>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\nItemRef.displayName = 'ItemRef';\n\nconst ItemMemo = memo(ItemRef);\n\nconst setRefForLast = ({\n  items,\n  index,\n  lastItemRef,\n  onLastItemChanged,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged?: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      if (onLastItemChanged) {\n        onLastItemChanged(items[items.length - 1].key);\n      }\n    }\n  };\n};\n"],"names":["OrderList","data","error","useErrorHandler","u","convertCategoryToItem","useCallback","order","key","id","render","Order","items","map","className","RenderList","isGrid","form","showError","useEffect","setFields","joinedMessage","useMessage","context","useContext","Error","lastItemRef","onLastItemChanged","length","undefined","item","index","ItemMemo","ref","setRefForLast","ItemRef","forwardRef","displayName","memo","element","current"],"sourceRoot":""}