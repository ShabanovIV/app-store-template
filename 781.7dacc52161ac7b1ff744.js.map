{"version":3,"file":"781.7dacc52161ac7b1ff744.js","mappings":"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","sources":["webpack://app-store/./src/features/forms/ProfileForm/model/useProfile.ts","webpack://app-store/./src/features/forms/ProfileForm/ui/ProfileForm.tsx","webpack://app-store/./src/features/forms/ProfileForm/lib/getProfileRules.ts","webpack://app-store/./src/features/forms/ProfilePwdForm/lib/getProfilePwdRules.ts","webpack://app-store/./src/features/forms/ProfilePwdForm/model/useProfilePwdForm.ts","webpack://app-store/./src/features/forms/ProfilePwdForm/ui/ProfilePwdForm.tsx","webpack://app-store/./src/widgets/switchers/ProfileSwitcher/ui/ProfileSwitcher.tsx","webpack://app-store/./src/widgets/switchers/ProfileSwitcher/ui/ProfileSwitcher.module.scss?0b84","webpack://app-store/./src/pages/ProfilePage/ProfilePage.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/hooks/useSuccessHandler.ts","webpack://app-store/./src/shared/lib/formValidation/getRules.ts"],"sourcesContent":["import { FormInstance } from 'antd';\nimport { useProfileQuery, useUpdateProfileMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useProfile = (form: FormInstance<FieldType>) => {\n  const { data, refetch, isLoading, isSuccess, error } = useProfileQuery();\n  const [updateProfile, { isLoading: isUpdating, isSuccess: isUpdateSuccess, error: updateError }] =\n    useUpdateProfileMutation();\n  useErrorHandler({ form, error });\n  useErrorHandler({ form, error: updateError });\n  useSuccessHandler({\n    isSuccess: isUpdateSuccess,\n    mess: 'Data saved successfully',\n  });\n\n  const update = async (name: string) => {\n    await updateProfile({ name });\n  };\n\n  return {\n    data,\n    refetch,\n    update,\n    isLoading,\n    isUpdating,\n    isUpdateSuccess,\n    isSuccess,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { getProfileRules } from '../lib/getProfileRules';\nimport { useProfile } from '../model/useProfile';\nimport { FieldType } from '../types/fields';\n\nexport const ProfileForm: React.FC = () => {\n  const [isChanges, setIsChanges] = useState(false);\n  const [form] = Form.useForm();\n  const { data, update, isUpdateSuccess, isLoading, isUpdating } = useProfile(form);\n\n  useEffect(() => {\n    if (data) {\n      form.setFieldsValue(data);\n    }\n  }, [data, form]);\n\n  useEffect(() => {\n    if (isUpdateSuccess) {\n      setIsChanges(false);\n    }\n  }, [isUpdateSuccess]);\n\n  const handleChange = () => {\n    setIsChanges(true);\n  };\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    update(values.name);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"ProfileForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Full Name\" name=\"name\" rules={getProfileRules('name')}>\n        <Input onChange={handleChange} placeholder=\"John Doe\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Email\" name=\"email\">\n        <Input readOnly />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Date of Registration\" name=\"signUpDate\">\n        <Input readOnly />\n      </Form.Item>\n\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        style={{ width: '100%' }}\n        disabled={isLoading || isUpdating || !isChanges}\n      >\n        {isLoading ? <Spin /> : 'Save'}\n      </Button>\n    </Form>\n  );\n};\n","import { Rule } from 'antd/es/form';\nimport { FieldType } from '../types/fields';\n\nexport type AllowedFields = Exclude<keyof FieldType, 'email' | 'signUpDate'>;\n\nexport const getProfileRules = (field: AllowedFields): Rule[] => {\n  const rules: Record<AllowedFields, Rule[]> = {\n    name: [\n      { required: true, message: 'Please enter your username' },\n      { min: 3, max: 20, message: 'Username must be between 3 and 20 characters' },\n      {\n        pattern: /^[a-zA-Z0-9_]+$/,\n        message: 'Username can only contain letters, numbers, and underscores',\n      },\n    ],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { Rule } from 'antd/es/form';\nimport { Fields, getRules } from 'src/shared/lib/formValidation/getRules';\nimport { FieldType } from '../types/fields';\n\nexport const getProfilePwdRules = (field: keyof FieldType, form: FormInstance<FieldType>) => {\n  const rules: Record<keyof FieldType, Rule[]> = {\n    password: getRules(Fields.password),\n    newPassword: getRules(Fields.password),\n    confirm: [\n      { required: true, message: 'Please confirm your password' },\n      {\n        validator: (_, value, callback) => {\n          if (value && value !== form.getFieldValue('newPassword')) {\n            callback('Passwords do not match');\n          } else {\n            callback();\n          }\n        },\n      },\n    ],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { useChangePasswordMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useProfilePassword = (form: FormInstance<FieldType>) => {\n  const [changePassword, { isLoading, isSuccess, error }] = useChangePasswordMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess,\n    mess: 'Password successfully changed',\n  });\n\n  const changePass = async (password: string, newPassword: string) => {\n    await changePassword({ password, newPassword });\n  };\n\n  return {\n    changePass,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { getProfilePwdRules } from '../lib/getProfilePwdRules';\nimport { useProfilePassword } from '../model/useProfilePwdForm';\nimport { FieldType } from '../types/fields';\n\ninterface ProfilePwdFormProps {\n  onSuccess?: () => void;\n}\n\nexport const ProfilePwdForm: React.FC<ProfilePwdFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm();\n  const { changePass, isLoading, isSuccess } = useProfilePassword(form);\n\n  useEffect(() => {\n    if (isSuccess && onSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess, onSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    changePass(values.password, values.newPassword);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"ProfilePwdForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType>\n        label=\"Current Password\"\n        name=\"password\"\n        rules={getProfilePwdRules('password', form)}\n      >\n        <Input.Password placeholder=\"Enter current password\" />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"New Password\"\n        name=\"newPassword\"\n        rules={getProfilePwdRules('newPassword', form)}\n      >\n        <Input.Password placeholder=\"Enter new password\" />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"Confirm password\"\n        name=\"confirm\"\n        rules={getProfilePwdRules('confirm', form)}\n      >\n        <Input.Password placeholder=\"Confirm password\" />\n      </Form.Item>\n\n      <Button type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }} disabled={isLoading}>\n        {isLoading ? <Spin /> : 'Change'}\n      </Button>\n    </Form>\n  );\n};\n","import { useState } from 'react';\nimport { Button, Space, Typography, Divider } from 'antd';\nimport { ProfileForm } from 'src/features/forms/ProfileForm';\nimport { ProfilePwdForm } from 'src/features/forms/ProfilePwdForm';\nimport styles from './ProfileSwitcher.module.scss';\n\nconst { Text } = Typography;\n\nexport const ProfileSwitcher: React.FC = () => {\n  const [isProfile, setIsProfile] = useState(true);\n\n  const handleClick = () => {\n    setIsProfile((prev) => !prev);\n  };\n\n  return (\n    <div className={styles.profileCard}>\n      <h4 className={styles.title}>{isProfile ? 'Personal data' : 'Password change'}</h4>\n\n      {isProfile ? <ProfileForm /> : <ProfilePwdForm />}\n\n      <Divider />\n\n      <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n        <Text type=\"secondary\">{isProfile ? 'Want to change your password?' : ''}</Text>\n        <Button type=\"link\" onClick={handleClick}>\n          {isProfile ? 'Password change' : 'Back to Profile'}\n        </Button>\n      </Space>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileCard\":\"ProfileSwitcher-module_profileCard-K0Zcw\",\"title\":\"ProfileSwitcher-module_title-E5qJI\"};","import { ProfileSwitcher } from 'src/widgets/switchers/ProfileSwitcher';\n\nconst ProfilePage: React.FC = () => {\n  return <ProfileSwitcher />;\n};\n\nexport default ProfilePage;\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { useEffect } from 'react';\nimport { useMessage } from './useMessage';\n\ninterface UseSuccessHandlerProps {\n  isSuccess: boolean;\n  mess: string;\n}\n\nexport const useSuccessHandler = ({ isSuccess, mess }: UseSuccessHandlerProps) => {\n  const { showSuccess } = useMessage();\n\n  useEffect(() => {\n    if (isSuccess) {\n      showSuccess(mess);\n    }\n  }, [isSuccess, mess, showSuccess]);\n};\n","import { Rule } from 'antd/es/form';\n\nexport const Fields = {\n  email: 'email',\n  password: 'password',\n} as const;\n\nexport type Field = (typeof Fields)[keyof typeof Fields];\n\nexport const getRules = (field: Field) => {\n  const rules: Record<Field, Rule[]> = {\n    email: [\n      { required: true, message: 'Please input your email' },\n      {\n        pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n        message: 'Please enter a valid email address',\n      },\n    ],\n    password: [{ required: true, message: 'Please enter your password' }],\n  };\n\n  return rules[field];\n};\n"],"names":["ProfileForm","isChanges","setIsChanges","useState","form","useForm","data","update","isUpdateSuccess","isLoading","isUpdating","refetch","isSuccess","error","updateProfile","updateError","useErrorHandler","u","useSuccessHandler","mess","name","useProfile","useEffect","setFieldsValue","labelAlign","labelCol","span","wrapperCol","onFinish","values","autoComplete","Item","label","rules","required","message","min","max","pattern","onChange","placeholder","readOnly","type","htmlType","style","width","disabled","getProfilePwdRules","field","password","getRules","newPassword","confirm","validator","_","value","callback","getFieldValue","ProfilePwdForm","onSuccess","changePass","changePassword","useProfilePassword","Password","Text","ProfileSwitcher","isProfile","setIsProfile","className","direction","align","onClick","prev","showError","setFields","joinedMessage","useMessage","context","useContext","Error","showSuccess","Fields","email"],"sourceRoot":""}