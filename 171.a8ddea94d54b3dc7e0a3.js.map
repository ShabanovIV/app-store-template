{"version":3,"file":"171.a8ddea94d54b3dc7e0a3.js","mappings":"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","sources":["webpack://app-store/./src/features/CategoryList/model/convertToItem.tsx","webpack://app-store/./src/features/CategoryList/ui/CategoryList.tsx","webpack://app-store/./src/features/CategoryList/model/useCategoryPaginateData.ts","webpack://app-store/./src/features/CategoryList/ui/CategoryList.module.scss?f66d","webpack://app-store/./src/pages/CategoryPage/CategoryPage.tsx","webpack://app-store/./src/pages/CategoryPage/CategoryPage.module.scss?add0","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx","webpack://app-store/./src/shared/ui/RenderList/RenderListObserver.tsx"],"sourcesContent":["import { Category, CategoryCard } from 'src/entities/Category';\nimport { IRenderItem } from 'src/shared/ui/RenderList/IRenderItem';\n\nexport const convertToItem = (category: Category, onClick: () => void): IRenderItem => ({\n  key: category.id,\n  render: () => <CategoryCard category={category} onClick={onClick} />,\n});\n","import { Divider, Space, Spin } from 'antd';\nimport RenderListObserver from 'src/shared/ui/RenderList/RenderListObserver';\nimport styles from './CategoryList.module.scss';\nimport { useCategoryPaginateData } from '../model/useCategoryPaginateData';\n\nexport const CategoryList: React.FC = () => {\n  const { hasMore, isFetching, items, handleLastItem } = useCategoryPaginateData();\n\n  return (\n    <div className={styles.container}>\n      <RenderListObserver items={items} onLastItem={handleLastItem} />\n      {(!hasMore || isFetching) && <Divider />}\n      {!hasMore && <Space className={styles.end}>Все категории загружены</Space>}\n      {isFetching && <Spin />}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGetCategoriesQuery } from 'src/entities/Category';\nimport { useAuth } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { ROUTES } from 'src/shared/config/routes';\nimport { IRenderItem } from 'src/shared/ui/RenderList/IRenderItem';\nimport { convertToItem } from './convertToItem';\n\nconst PAGE_SIZE = 10;\n\nexport const useCategoryPaginateData = () => {\n  const navigate = useNavigate();\n  const { isAuth } = useAuth();\n  const loadedPages = useRef<number[]>([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [items, setItems] = useState<IRenderItem[]>([]);\n  const { data, isFetching, isLoading, error, refetch } = useGetCategoriesQuery(\n    {\n      pagination: { pageSize: PAGE_SIZE, pageNumber: pageNumber },\n      sorting: { type: 'ASC', field: 'createdAt' },\n    },\n    {\n      refetchOnMountOrArgChange: true,\n    },\n  );\n\n  useErrorHandler({ error });\n\n  useEffect(() => {\n    if (data === undefined) {\n      loadedPages.current = [];\n      setItems([]);\n      setHasMore(true);\n      setPageNumber(1);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (isLoading && isFetching) {\n      setItems([]);\n    }\n  }, [isFetching, isLoading]);\n\n  const handleLastItem = useCallback(() => {\n    if (!hasMore || isFetching) return;\n    setPageNumber((prev) => prev + 1);\n  }, [hasMore, isFetching]);\n\n  useEffect(() => {\n    if (\n      data &&\n      data.data.length > 0 &&\n      !loadedPages.current.includes(pageNumber) &&\n      data.pagination.pageNumber === pageNumber\n    ) {\n      loadedPages.current.push(pageNumber);\n      setItems((prev) => [\n        ...prev,\n        ...data.data.map((category) =>\n          convertToItem(category, () => navigate(`${ROUTES.products.basePath}${category.id}`)),\n        ),\n      ]);\n    } else if (data && data.data.length < PAGE_SIZE) {\n      setHasMore(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, pageNumber]);\n\n  return {\n    isAuth,\n    isFetching,\n    hasMore,\n    items,\n    refetch,\n    handleLastItem,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CategoryList-module_container-JHTbf\",\"end\":\"CategoryList-module_end-M57dM\"};","import { CategoryList } from 'src/features/CategoryList';\nimport styles from './CategoryPage.module.scss';\n\nconst CategoryPage: React.FC = () => {\n  return (\n    <div className={styles.page}>\n      <CategoryList />\n    </div>\n  );\n};\n\nexport default CategoryPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"CategoryPage-module_page-FRD00\"};","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"RenderList-module_list-BF_R0\",\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\",\"empty\":\"RenderList-module_empty-VeKxm\"};","import React, { forwardRef, memo } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderListProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged?: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  isGrid,\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  return (\n    <ul className={isGrid === undefined || isGrid ? styles.listGrid : styles.list}>\n      {items.map((item, index) => (\n        <ItemMemo\n          key={item.key}\n          item={item}\n          ref={setRefForLast({ items, index, lastItemRef, onLastItemChanged })}\n        />\n      ))}\n    </ul>\n  );\n};\n\ntype ListItemProps = {\n  item: IRenderItem;\n};\n\nconst ItemRef = forwardRef<HTMLLIElement, ListItemProps>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\nItemRef.displayName = 'ItemRef';\n\nconst ItemMemo = memo(ItemRef);\n\nconst setRefForLast = ({\n  items,\n  index,\n  lastItemRef,\n  onLastItemChanged,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged?: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      if (onLastItemChanged) {\n        onLastItemChanged(items[items.length - 1].key);\n      }\n    }\n  };\n};\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport { RenderList } from './RenderList';\n\nexport interface IRenderListObserverProps {\n  items: IRenderItem[];\n  onLastItem: () => void;\n}\n\nconst RenderListObserver: React.FC<IRenderListObserverProps> = ({ items, onLastItem }) => {\n  const [lastItemKey, setLastItemKey] = useState('');\n  const prevLastItemKey = useRef('');\n  const lastItemRef = useRef<HTMLLIElement | null>(null);\n  const hasCalledOnLastItem = useRef(false);\n\n  const handleIntersection = useCallback(\n    (entries: IntersectionObserverEntry[]) => {\n      const entry = entries[0];\n      if (entry?.isIntersecting && !hasCalledOnLastItem.current) {\n        hasCalledOnLastItem.current = true;\n        onLastItem();\n      }\n    },\n    [onLastItem],\n  );\n\n  useEffect(() => {\n    if (lastItemKey === prevLastItemKey.current) {\n      return;\n    } else {\n      prevLastItemKey.current = lastItemKey;\n    }\n\n    const observer = new IntersectionObserver(handleIntersection, { threshold: 0.5 });\n\n    const currentLastItem = lastItemRef.current;\n    if (currentLastItem) {\n      observer.observe(currentLastItem);\n    }\n\n    return () => {\n      if (currentLastItem) {\n        observer.unobserve(currentLastItem);\n      }\n    };\n  }, [handleIntersection, lastItemKey]);\n\n  useEffect(() => {\n    hasCalledOnLastItem.current = false;\n  }, [lastItemKey]);\n\n  return <RenderList items={items} lastItemRef={lastItemRef} onLastItemChanged={setLastItemKey} />;\n};\n\nexport default RenderListObserver;\n"],"names":["CategoryList","hasMore","isFetching","items","handleLastItem","navigate","isAuth","loadedPages","useRef","pageNumber","setPageNumber","useState","setHasMore","setItems","data","isLoading","error","refetch","pagination","pageSize","sorting","type","field","refetchOnMountOrArgChange","useErrorHandler","u","useEffect","undefined","current","useCallback","prev","length","includes","push","map","category","onClick","key","id","render","Category","convertToItem","products","basePath","useCategoryPaginateData","className","RenderListObserver","onLastItem","form","showError","setFields","joinedMessage","useMessage","context","useContext","Error","RenderList","isGrid","lastItemRef","onLastItemChanged","item","index","ItemMemo","ref","setRefForLast","ItemRef","forwardRef","displayName","memo","element","lastItemKey","setLastItemKey","prevLastItemKey","hasCalledOnLastItem","handleIntersection","entries","entry","isIntersecting","observer","IntersectionObserver","threshold","currentLastItem","observe","unobserve"],"sourceRoot":""}