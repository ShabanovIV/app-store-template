{"version":3,"file":"781.c8d7d369ae6167cb77b9.js","mappings":"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","sources":["webpack://app-store/./src/shared/hooks/useSuccessHandler.ts","webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/lib/formValidation/getRules.ts","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/features/forms/ProfileForm/model/useProfile.ts","webpack://app-store/./src/features/forms/ProfileForm/ui/ProfileForm.tsx","webpack://app-store/./src/features/forms/ProfileForm/lib/getProfileRules.ts","webpack://app-store/./src/features/forms/ProfilePwdForm/lib/getProfilePwdRules.ts","webpack://app-store/./src/features/forms/ProfilePwdForm/model/useProfilePwdForm.ts","webpack://app-store/./src/features/forms/ProfilePwdForm/ui/ProfilePwdForm.tsx","webpack://app-store/./src/widgets/switchers/ProfileSwitcher/ui/ProfileSwitcher.tsx","webpack://app-store/./src/widgets/switchers/ProfileSwitcher/ui/ProfileSwitcher.module.scss?0b84","webpack://app-store/./src/pages/ProfilePage/ProfilePage.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useMessage } from './useMessage';\n\ninterface UseSuccessHandlerProps {\n  isSuccess: boolean;\n  mess: string;\n}\n\nexport const useSuccessHandler = ({ isSuccess, mess }: UseSuccessHandlerProps) => {\n  const { showSuccess } = useMessage();\n\n  useEffect(() => {\n    if (isSuccess) {\n      showSuccess(mess);\n    }\n  }, [isSuccess, mess, showSuccess]);\n};\n","import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","import { Rule } from 'antd/es/form';\n\nexport const Fields = {\n  email: 'email',\n  password: 'password',\n} as const;\n\nexport type Field = (typeof Fields)[keyof typeof Fields];\n\nexport const getRules = (field: Field) => {\n  const rules: Record<Field, Rule[]> = {\n    email: [\n      { required: true, message: 'Please input your email' },\n      {\n        pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n        message: 'Please enter a valid email address',\n      },\n    ],\n    password: [{ required: true, message: 'Please enter your password' }],\n  };\n\n  return rules[field];\n};\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { FormInstance } from 'antd';\nimport { useProfileQuery, useUpdateProfileMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useProfile = (form: FormInstance<FieldType>) => {\n  const { data, refetch, isLoading, isSuccess, error } = useProfileQuery();\n  const [updateProfile, { isLoading: isUpdating, isSuccess: isUpdateSuccess, error: updateError }] =\n    useUpdateProfileMutation();\n  useErrorHandler({ form, error });\n  useErrorHandler({ form, error: updateError });\n  useSuccessHandler({\n    isSuccess: isUpdateSuccess,\n    mess: 'Data saved successfully',\n  });\n\n  const update = async (name: string) => {\n    await updateProfile({ name });\n  };\n\n  return {\n    data,\n    refetch,\n    update,\n    isLoading,\n    isUpdating,\n    isUpdateSuccess,\n    isSuccess,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { getProfileRules } from '../lib/getProfileRules';\nimport { useProfile } from '../model/useProfile';\nimport { FieldType } from '../types/fields';\n\nexport const ProfileForm: React.FC = () => {\n  const [isChanges, setIsChanges] = useState(false);\n  const [form] = Form.useForm();\n  const { data, update, isUpdateSuccess, isLoading, isUpdating } = useProfile(form);\n\n  useEffect(() => {\n    if (data) {\n      form.setFieldsValue(data);\n    }\n  }, [data, form]);\n\n  useEffect(() => {\n    if (isUpdateSuccess) {\n      setIsChanges(false);\n    }\n  }, [isUpdateSuccess]);\n\n  const handleChange = () => {\n    setIsChanges(true);\n  };\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    update(values.name);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"ProfileForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType> label=\"Full Name\" name=\"name\" rules={getProfileRules('name')}>\n        <Input onChange={handleChange} placeholder=\"John Doe\" />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Email\" name=\"email\">\n        <Input readOnly />\n      </Form.Item>\n\n      <Form.Item<FieldType> label=\"Date of Registration\" name=\"signUpDate\">\n        <Input readOnly />\n      </Form.Item>\n\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        style={{ width: '100%' }}\n        disabled={isLoading || isUpdating || !isChanges}\n      >\n        {isLoading ? <Spin /> : 'Save'}\n      </Button>\n    </Form>\n  );\n};\n","import { Rule } from 'antd/es/form';\nimport { FieldType } from '../types/fields';\n\nexport type AllowedFields = Exclude<keyof FieldType, 'email' | 'signUpDate'>;\n\nexport const getProfileRules = (field: AllowedFields): Rule[] => {\n  const rules: Record<AllowedFields, Rule[]> = {\n    name: [\n      { required: true, message: 'Please enter your username' },\n      { min: 3, max: 20, message: 'Username must be between 3 and 20 characters' },\n      {\n        pattern: /^[a-zA-Z0-9_]+$/,\n        message: 'Username can only contain letters, numbers, and underscores',\n      },\n    ],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { Rule } from 'antd/es/form';\nimport { Fields, getRules } from 'src/shared/lib/formValidation/getRules';\nimport { FieldType } from '../types/fields';\n\nexport const getProfilePwdRules = (field: keyof FieldType, form: FormInstance<FieldType>) => {\n  const rules: Record<keyof FieldType, Rule[]> = {\n    password: getRules(Fields.password),\n    newPassword: getRules(Fields.password),\n    confirm: [\n      { required: true, message: 'Please confirm your password' },\n      {\n        validator: (_, value, callback) => {\n          if (value && value !== form.getFieldValue('newPassword')) {\n            callback('Passwords do not match');\n          } else {\n            callback();\n          }\n        },\n      },\n    ],\n  };\n\n  return rules[field];\n};\n","import { FormInstance } from 'antd';\nimport { useChangePasswordMutation } from 'src/entities/User';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useSuccessHandler } from 'src/shared/hooks/useSuccessHandler';\nimport { FieldType } from '../types/fields';\n\nexport const useProfilePassword = (form: FormInstance<FieldType>) => {\n  const [changePassword, { isLoading, isSuccess, error }] = useChangePasswordMutation();\n  useErrorHandler({ form, error });\n  useSuccessHandler({\n    isSuccess,\n    mess: 'Password successfully changed',\n  });\n\n  const changePass = async (password: string, newPassword: string) => {\n    await changePassword({ password, newPassword });\n  };\n\n  return {\n    changePass,\n    isLoading,\n    isSuccess,\n  };\n};\n","import { useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Spin } from 'antd';\nimport { getProfilePwdRules } from '../lib/getProfilePwdRules';\nimport { useProfilePassword } from '../model/useProfilePwdForm';\nimport { FieldType } from '../types/fields';\n\ninterface ProfilePwdFormProps {\n  onSuccess?: () => void;\n}\n\nexport const ProfilePwdForm: React.FC<ProfilePwdFormProps> = ({ onSuccess }) => {\n  const [form] = Form.useForm();\n  const { changePass, isLoading, isSuccess } = useProfilePassword(form);\n\n  useEffect(() => {\n    if (isSuccess && onSuccess) {\n      onSuccess();\n    }\n  }, [isSuccess, onSuccess]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    changePass(values.password, values.newPassword);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"ProfilePwdForm\"\n      labelAlign=\"left\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item<FieldType>\n        label=\"Current Password\"\n        name=\"password\"\n        rules={getProfilePwdRules('password', form)}\n      >\n        <Input.Password placeholder=\"Enter current password\" />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"New Password\"\n        name=\"newPassword\"\n        rules={getProfilePwdRules('newPassword', form)}\n      >\n        <Input.Password placeholder=\"Enter new password\" />\n      </Form.Item>\n\n      <Form.Item<FieldType>\n        label=\"Confirm password\"\n        name=\"confirm\"\n        rules={getProfilePwdRules('confirm', form)}\n      >\n        <Input.Password placeholder=\"Confirm password\" />\n      </Form.Item>\n\n      <Button type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }} disabled={isLoading}>\n        {isLoading ? <Spin /> : 'Change'}\n      </Button>\n    </Form>\n  );\n};\n","import { useState } from 'react';\nimport { Button, Space, Typography, Divider } from 'antd';\nimport { ProfileForm } from 'src/features/forms/ProfileForm';\nimport { ProfilePwdForm } from 'src/features/forms/ProfilePwdForm';\nimport styles from './ProfileSwitcher.module.scss';\n\nconst { Text } = Typography;\n\nexport const ProfileSwitcher: React.FC = () => {\n  const [isProfile, setIsProfile] = useState(true);\n\n  const handleClick = () => {\n    setIsProfile((prev) => !prev);\n  };\n\n  return (\n    <div className={styles.profileCard}>\n      <h4 className={styles.title}>{isProfile ? 'Personal data' : 'Password change'}</h4>\n\n      {isProfile ? <ProfileForm /> : <ProfilePwdForm />}\n\n      <Divider />\n\n      <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n        <Text type=\"secondary\">{isProfile ? 'Want to change your password?' : ''}</Text>\n        <Button type=\"link\" onClick={handleClick}>\n          {isProfile ? 'Password change' : 'Back to Profile'}\n        </Button>\n      </Space>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileCard\":\"ProfileSwitcher-module_profileCard-K0Zcw\",\"title\":\"ProfileSwitcher-module_title-E5qJI\"};","import { ProfileSwitcher } from 'src/widgets/switchers/ProfileSwitcher';\n\nconst ProfilePage: React.FC = () => {\n  return <ProfileSwitcher />;\n};\n\nexport default ProfilePage;\n"],"names":["useSuccessHandler","isSuccess","mess","showSuccess","useEffect","useMessage","context","useContext","Error","Fields","email","password","getRules","field","required","message","pattern","useErrorHandler","form","error","showError","setFields","joinedMessage","ProfileForm","isChanges","setIsChanges","useState","useForm","data","update","isUpdateSuccess","isLoading","isUpdating","refetch","updateProfile","updateError","u","name","useProfile","setFieldsValue","labelAlign","labelCol","span","wrapperCol","onFinish","values","autoComplete","Item","label","rules","min","max","onChange","placeholder","readOnly","type","htmlType","style","width","disabled","getProfilePwdRules","newPassword","confirm","validator","_","value","callback","getFieldValue","ProfilePwdForm","onSuccess","changePass","changePassword","useProfilePassword","Password","Text","ProfileSwitcher","isProfile","setIsProfile","className","direction","align","onClick","prev"],"sourceRoot":""}