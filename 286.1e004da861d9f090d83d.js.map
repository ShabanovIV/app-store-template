{"version":3,"file":"286.1e004da861d9f090d83d.js","mappings":"6IAGO,MAAMA,EAAa,KACxB,MAAMC,GAAU,IAAAC,YAAW,KAC3B,IAAKD,EACH,MAAM,IAAIE,MAAM,6DAElB,OAAOF,CAAO,C,0DCPhB,MCUaG,EAAyC,EACpDC,SACAC,QACAC,cACAC,uBAEqB,IAAjBF,EAAMG,QACD,gBAAKC,UDjB0I,gCCiBnH,kCAInC,eAAIA,eAAsBC,IAAXN,GAAwBA,EDrBsB,mCAA1C,+BCqB0D,SAC1EC,EAAMM,KAAI,CAACC,EAAMC,KAChB,SAACC,EAAQ,CAEPF,KAAMA,EACNG,IAAKC,EAAc,CAAEX,QAAOQ,QAAOP,cAAaC,uBAF3CK,EAAKK,SAadC,GAAU,IAAAC,aAAyC,EAAGP,QAAQG,KAClE,eAAIK,GAAIR,EAAKK,IAAKF,IAAKA,EAAKN,UDtCiF,mCCsCvD,SACnDG,EAAKS,aAGVH,EAAQI,YAAc,UAEtB,MAAMR,GAAW,IAAAS,MAAKL,GAEhBF,EAAgB,EACpBX,QACAQ,QACAP,cACAC,uBAOQiB,IACFX,IAAUR,EAAMG,OAAS,GAAKF,IAChCA,EAAYmB,QAAUD,EAClBjB,GACFA,EAAkBF,EAAMA,EAAMG,OAAS,GAAGS,KAE9C,C,oECtDG,MAAMS,EAAkB,EAAYC,OAAMC,YAC/C,MAAM,UAAEC,IAAc,UAEtB,IAAAC,YAAU,KACR,GAAIF,EAAO,EACT,QAAmBA,GAEfD,GACFA,EAAKI,WAAU,QAAkBH,IAGnC,MAAMI,GAAgB,QAA0BJ,GAC5CI,GACFH,EAAUG,EAEd,IACC,CAACJ,EAAOD,EAAME,GAAW,C,4KCrBvB,MCGMI,EAAW,KACtB,MAAM,MAAE5B,EAAK,WAAE6B,GDJM,M,MACrB,MAAMC,GAAM,QAAgBC,IAAU,QAAiBA,KACjDC,GAAO,QAAgBD,IAAU,QAAgBA,MACjD,KAAEE,EAAI,WAAEJ,EAAU,MAAEN,IAAU,QAClC,CAAEO,OACF,CAAEI,2BAA2B,IAS/B,OAPA,EAAAb,EAAAc,GAAgB,CAAEZ,UAOX,CACLvB,MALe,IAAf8B,EAAI3B,OACA,GACqE,QAApE,EAAA8B,aAAI,EAAJA,EAAMA,KAAK3B,KAAK8B,IAAY,CAAGA,UAASC,OAAQL,EAAKI,EAAQrB,eAAO,QAAI,GAI7Ec,aACD,ECb6BS,GACxBC,GAAW,UAEXC,EAAYxC,EAAMM,KAAKmC,IAAQ,CACnC7B,IAAK6B,EAAIL,QAAQrB,GACjBC,OAAQ,KAAM,SAAC0B,EAAA,GAAQ,CAACN,QAASK,EAAIL,QAASC,OAAQI,EAAIJ,aAG5D,OACE,iBAAKjC,UCjBqB,oCDiBQ,UAC/ByB,IACC,UAAC,KAAOc,MAAK,YACX,SAAC,IAAI,KACL,SAAC,IAAK,CACJC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UACb,iCAMP,SAACjD,EAAA,EAAU,CAACC,QAAQ,EAAOC,MAAOwC,KAClC,SAAC,IAAO,IACPxC,EAAMG,OAAS,IACd,UAAC,KAAOwC,MAAK,YACX,SAAC,KAAM,CAACK,QAAS,IAAMT,EAAS,KAAOU,SAASC,MAAK,8BACrD,SAAC,KAAM,CAACF,QAAS,IAAMT,EAAS,KAAOY,SAASD,MAAK,sCAI5D,EEpCH,EAJ2B,KAClB,SAACtB,EAAQ,G","sources":["webpack://app-store/./src/shared/hooks/useMessage.ts","webpack://app-store/./src/shared/ui/RenderList/RenderList.module.scss?5ddc","webpack://app-store/./src/shared/ui/RenderList/RenderList.tsx","webpack://app-store/./src/shared/api/errors/useErrorHandler.ts","webpack://app-store/./src/widgets/shop/CartList/model/useCart.ts","webpack://app-store/./src/widgets/shop/CartList/ui/CartList.tsx","webpack://app-store/./src/widgets/shop/CartList/ui/CartList.module.scss?b6f6","webpack://app-store/./src/pages/CartPage/CartPage.tsx"],"sourcesContent":["import { useContext } from 'react';\nimport { MessageContext } from 'src/shared/providers/MessageContext';\n\nexport const useMessage = () => {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessage должен использоваться внутри <MessageProvider>');\n  }\n  return context;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"RenderList-module_list-BF_R0\",\"listGrid\":\"RenderList-module_listGrid-VEEh9\",\"listItem\":\"RenderList-module_listItem-d2Xxn\",\"empty\":\"RenderList-module_empty-VeKxm\"};","import React, { forwardRef, memo } from 'react';\nimport { IRenderItem } from './IRenderItem';\nimport styles from './RenderList.module.scss';\n\nexport interface IRenderListProps {\n  isGrid?: boolean;\n  items: IRenderItem[];\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n  onLastItemChanged?: (key: string) => void;\n}\n\nexport const RenderList: React.FC<IRenderListProps> = ({\n  isGrid,\n  items,\n  lastItemRef,\n  onLastItemChanged,\n}) => {\n  if (items.length === 0) {\n    return <div className={styles.empty}>No items to display</div>;\n  }\n\n  return (\n    <ul className={isGrid === undefined || isGrid ? styles.listGrid : styles.list}>\n      {items.map((item, index) => (\n        <ItemMemo\n          key={item.key}\n          item={item}\n          ref={setRefForLast({ items, index, lastItemRef, onLastItemChanged })}\n        />\n      ))}\n    </ul>\n  );\n};\n\ntype ListItemProps = {\n  item: IRenderItem;\n};\n\nconst ItemRef = forwardRef<HTMLLIElement, ListItemProps>(({ item }, ref) => (\n  <li id={item.key} ref={ref} className={styles.listItem}>\n    {item.render()}\n  </li>\n));\nItemRef.displayName = 'ItemRef';\n\nconst ItemMemo = memo(ItemRef);\n\nconst setRefForLast = ({\n  items,\n  index,\n  lastItemRef,\n  onLastItemChanged,\n}: {\n  items: IRenderItem[];\n  index: number;\n  onLastItemChanged?: (key: string) => void;\n  lastItemRef?: React.RefObject<HTMLLIElement | null>;\n}) => {\n  return (element: HTMLLIElement | null) => {\n    if (index === items.length - 1 && lastItemRef) {\n      lastItemRef.current = element;\n      if (onLastItemChanged) {\n        onLastItemChanged(items[items.length - 1].key);\n      }\n    }\n  };\n};\n","import { useEffect } from 'react';\nimport { FormInstance } from 'antd';\nimport { useMessage } from 'src/shared/hooks/useMessage';\nimport { extractFormErrors, extractWithoutFiledErrors, throwIfGlobalError } from './errorParser';\n\nexport interface UseErrorHandlerProps<TFields> {\n  error: unknown;\n  form?: FormInstance<TFields>;\n}\n\nexport const useErrorHandler = <TFields>({ form, error }: UseErrorHandlerProps<TFields>) => {\n  const { showError } = useMessage();\n\n  useEffect(() => {\n    if (error) {\n      throwIfGlobalError(error);\n\n      if (form) {\n        form.setFields(extractFormErrors(error));\n      }\n\n      const joinedMessage = extractWithoutFiledErrors(error);\n      if (joinedMessage) {\n        showError(joinedMessage);\n      }\n    }\n  }, [error, form, showError]);\n};\n","import { useGetProductsQuery } from 'src/entities/Product';\nimport { selectCartItems, selectProductIds } from 'src/features/Cart';\nimport { useErrorHandler } from 'src/shared/api/errors/useErrorHandler';\nimport { useAppSelector } from 'src/shared/hooks/store';\n\nexport const useCart = () => {\n  const ids = useAppSelector((state) => selectProductIds(state));\n  const cart = useAppSelector((state) => selectCartItems(state));\n  const { data, isFetching, error } = useGetProductsQuery(\n    { ids },\n    { refetchOnMountOrArgChange: true },\n  );\n  useErrorHandler({ error });\n\n  const items =\n    ids.length === 0\n      ? []\n      : (data?.data.map((product) => ({ product, amount: cart[product.id] })) ?? []);\n\n  return {\n    items,\n    isFetching,\n  };\n};\n","import { Button, Divider, Space, Spin } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { CartItem } from 'src/features/Cart';\nimport { ROUTES } from 'src/shared/config/routes';\nimport { RenderList } from 'src/shared/ui/RenderList/RenderList';\nimport styles from './CartList.module.scss';\nimport { useCart } from '../model/useCart';\n\nexport const CartList = () => {\n  const { items, isFetching } = useCart();\n  const navigate = useNavigate();\n\n  const cartItems = items.map((itm) => ({\n    key: itm.product.id,\n    render: () => <CartItem product={itm.product} amount={itm.amount} />,\n  }));\n\n  return (\n    <div className={styles.listWrapper}>\n      {isFetching && (\n        <Button.Group>\n          <Spin />\n          <Space\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            Cart loading...\n          </Space>\n        </Button.Group>\n      )}\n      <RenderList isGrid={false} items={cartItems} />\n      <Divider />\n      {items.length > 0 && (\n        <Button.Group>\n          <Button onClick={() => navigate(ROUTES.category.path)}>Back to catalog</Button>\n          <Button onClick={() => navigate(ROUTES.checkout.path)}>Proceed to Checkout</Button>\n        </Button.Group>\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listWrapper\":\"CartList-module_listWrapper-UM6Qt\"};","import { CartList } from 'src/widgets/shop/CartList';\n\nconst CartPage: React.FC = () => {\n  return <CartList />;\n};\n\nexport default CartPage;\n"],"names":["useMessage","context","useContext","Error","RenderList","isGrid","items","lastItemRef","onLastItemChanged","length","className","undefined","map","item","index","ItemMemo","ref","setRefForLast","key","ItemRef","forwardRef","id","render","displayName","memo","element","current","useErrorHandler","form","error","showError","useEffect","setFields","joinedMessage","CartList","isFetching","ids","state","cart","data","refetchOnMountOrArgChange","u","product","amount","useCart","navigate","cartItems","itm","Cart","Group","style","display","justifyContent","alignItems","onClick","category","path","checkout"],"sourceRoot":""}